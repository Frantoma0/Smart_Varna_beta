
import { uploadImage } from './storageService.js';
import { getFormattedDateTime, getGeohash } from '../utils/helpers.js';
import { getDistance } from '../utils/helpers.js'; // –©–µ —Å—ä–∑–¥–∞–¥–µ–º —Ç–æ–∑–∏ —Ñ–∞–π–ª
import * as signalRepository from '../database/signalRepository.js';
import { getTieredWeightAI } from './aiService.js';
import { findMasterSignal } from './duplicationService.js';
import { generateSignalTitleAI } from './aiService.js'; 
import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
const __dirname = dirname(fileURLToPath(import.meta.url));
// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Supabase –∫–ª–∏–µ–Ω—Ç–∞ (—Ç—Ä—è–±–≤–∞ –¥–∞ –µ –¥–æ—Å—Ç—ä–ø–µ–Ω —Ç—É–∫) ---
const SETTINGS = JSON.parse(readFileSync(join(__dirname, '..', 'config', 'settings.json'), 'utf-8'));


// --- –û—Å–Ω–æ–≤–Ω–∞ –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ ---

export async function createSignal(data) {
    let citizenId = null;
    let finalImageUrl = null;

    // –°—Ç—ä–ø–∫–∞ 0: –ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞
    if (data.imageUrl) {
        console.log('üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –µ —Å–Ω–∏–º–∫–∞ (base64). –ü—Ä–µ–¥–∞–≤–∞–º –∫—ä–º Storage Service...');
        const base64Data = data.imageUrl.split(';base64,').pop();
        const imageBuffer = Buffer.from(base64Data, 'base64');
        const fileExtension = data.imageUrl.substring("data:image/".length, data.imageUrl.indexOf(";base64"));
        const fileName = `photo_${data.trackCode}.${fileExtension}`;
        
        // –ü—Ä–æ—Å—Ç–æ –∏–∑–≤–∏–∫–≤–∞–º–µ –Ω–æ–≤–∞—Ç–∞ —É—Å–ª—É–≥–∞
        finalImageUrl = await uploadImage(imageBuffer, fileName, fileExtension);
    }

    // –°—Ç—ä–ø–∫–∞ 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω
    if (data.email && !['–ø—Ä–æ–ø—É—Å–Ω–∏', '–Ω–µ'].includes(data.email)) {
        const existingCitizen = await signalRepository.findCitizenByEmail(data.email);
        if (existingCitizen) {
            await signalRepository.updateCitizenSignalCount(existingCitizen.citizen_id, existingCitizen.total_signals + 1);
            citizenId = existingCitizen.citizen_id;
        } else {
            const newCitizen = await signalRepository.createCitizen(data.email, getFormattedDateTime());
            citizenId = newCitizen.citizen_id;
        }
    } else {
        const anonCitizen = await signalRepository.createAnonymousCitizen();
        citizenId = anonCitizen.citizen_id;
    }
    // –°—Ç—ä–ø–∫–∞ 2: –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∑–∞–≥–ª–∞–≤–∏–µ
    const title = await generateSignalTitleAI(data.description);
    const latitude = parseFloat(data.latitude) || null;
    const longitude = parseFloat(data.longitude) || null;

    // –°—Ç—ä–ø–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥—É–±–ª–∏–∫–∞—Ç–∏ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–æ —á—Ä–µ–∑ –Ω–æ–≤–∞—Ç–∞ —É—Å–ª—É–≥–∞)
    const masterSignal = await findMasterSignal({
        description: data.description,
        latitude: latitude,
        longitude: longitude,
        address: data.address
    });


    // –°—Ç—ä–ø–∫–∞ 4: –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Geohash
    const geohash = getGeohash(latitude, longitude, SETTINGS.geohashPrecision || 7);
    
    // –°—Ç—ä–ø–∫–∞ 5: –ó–∞–ø–∏—Å –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
    const formattedDate = getFormattedDateTime();
    const commonSignalData = {
        title,
        description: data.description,
        adress: data.address,
        image_url: finalImageUrl,
        date_created: formattedDate,
        tracking_code: data.trackCode,
        citizen_id: citizenId,
        institution: data.institution,
        latitude: parseFloat(data.latitude) || null,
        longitude: parseFloat(data.longitude) || null,
        geohash: geohash
    };
    if (masterSignal) {
        // –ó–∞–ø–∏—Å–≤–∞–º–µ –∫–∞—Ç–æ –¥—ä—â–µ—Ä–µ–Ω —Å–∏–≥–Ω–∞–ª
        const { geohash, ...childFields } = commonSignalData;
        const childData = { ...childFields, status_id: masterSignal.status_id, signal_id: masterSignal.signal_id };
        await signalRepository.saveChildSignal(childData);
    } else {
        // –ó–∞–ø–∏—Å–≤–∞–º–µ –∫–∞—Ç–æ –Ω–æ–≤, –≥–ª–∞–≤–µ–Ω —Å–∏–≥–Ω–∞–ª
        const statusData = await signalRepository.createStatus(
            data.trackCode, '–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª', formattedDate, '98e5cc79-e763-4e41-b1c2-b0303aa8f759'
        );
        
        console.log("–û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ —Ç–µ–∂–µ—Å—Ç —á—Ä–µ–∑ —Ç–∏–µ—Ä–æ–≤–∞ –∫–ª–∞—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç AI...");
        // –ò–∑–≤–∏–∫–≤–∞–º–µ –Ω–æ–≤–∞—Ç–∞, –æ–ø—Ä–æ—Å—Ç–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –≤—Ä—ä—â–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ —Ñ–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Ç–µ–∂–µ—Å—Ç
        const initialWeight = await getTieredWeightAI(data.description);
        console.log(`AI –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–∂–µ—Å—Ç: ${initialWeight}`);

        const signalData = { ...commonSignalData, status_id: statusData.status_id, weight: initialWeight };
        await signalRepository.saveMasterSignal(signalData);
    }

    return { success: true, trackCode: data.trackCode };
}