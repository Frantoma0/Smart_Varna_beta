// routes/signals.js

import express from 'express';
import * as signalRepository from '../database/signalRepository.js';
import { createSignal } from '../services/signalService.js';
import rateLimit from 'express-rate-limit';
import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
const __dirname = dirname(fileURLToPath(import.meta.url));
const SETTINGS = JSON.parse(readFileSync(join(__dirname, '..', 'config', 'settings.json'), 'utf-8'));

const router = express.Router();

// --- Rate Limiters ---
const dailyLimiter = rateLimit({
    windowMs: 24 * 60 * 60 * 1000,
    max: SETTINGS.rateLimit.daily,
    message: { error: '–ü—Ä–µ–≤–∏—à–∏—Ö—Ç–µ –¥–Ω–µ–≤–Ω–∏—è –ª–∏–º–∏—Ç –æ—Ç 50 —Å–∏–≥–Ω–∞–ª–∞.' },
    standardHeaders: true,
    legacyHeaders: false,
});

const hourlyLimiter = rateLimit({
    windowMs: 60 * 60 * 1000,
    max: SETTINGS.rateLimit.hourly,
    message: { error: '–ü—Ä–µ–≤–∏—à–∏—Ö—Ç–µ —á–∞—Å–æ–≤–∏—è –ª–∏–º–∏—Ç –æ—Ç 10 —Å–∏–≥–Ω–∞–ª–∞.' },
    standardHeaders: true,
    legacyHeaders: false,
});

// --- –î–µ—Ñ–∏–Ω–∏—Ü–∏—è –Ω–∞ –µ–Ω–¥–ø–æ–π–Ω—Ç–∞ ---
router.post('/submit-signal', [dailyLimiter, hourlyLimiter], async (req, res) => {
    if (req.body.website) {
        console.log('üçØ –•–≤–∞–Ω–∞—Ç –±–æ—Ç –≤ honeypot –∫–∞–ø–∞–Ω–∞!');
        return res.status(400).json({ error: '–°–ø–∞–º –¥–µ—Ç–µ–∫—Ü–∏—è.' });
    }
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
    const requiredFields = ['description', 'institution', 'trackCode'];
    const missingFields = requiredFields.filter(field => !req.body[field]);
    if (missingFields.length > 0) {
        return res.status(400).json({ error: `–õ–∏–ø—Å–≤–∞—â–∏ –ø–æ–ª–µ—Ç–∞: ${missingFields.join(', ')}` });
    }

    try {
        const result = await createSignal(req.body);
        res.json(result);
    } catch (error) {
        console.error("üí• === –¶–Ø–õ–û–°–¢–ù–ê –ì–†–ï–®–ö–ê –≤ /api/submit-signal ===", error);
        res.status(500).json({ error: error.message });
    }
});

router.post('/update-title', async (req, res) => {
    const { trackCode, newTitle } = req.body;

    if (!trackCode || !newTitle) {
        return res.status(400).json({ error: '–õ–∏–ø—Å–≤–∞—Ç trackCode –∏–ª–∏ newTitle.' });
    }

    try {
        // –©–µ —Å—ä–∑–¥–∞–¥–µ–º —Ç–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–ª–µ–¥ –º–∞–ª–∫–æ
        await signalRepository.updateSignalTitle(trackCode, newTitle);
        res.status(200).json({ success: true, message: '–ó–∞–≥–ª–∞–≤–∏–µ—Ç–æ –µ –æ–±–Ω–æ–≤–µ–Ω–æ.' });
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∑–∞–≥–ª–∞–≤–∏–µ:', error);
        res.status(500).json({ error: error.message });
    }
});
// –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–º–µ —Ä—É—Ç–µ—Ä–∞, –∑–∞ –¥–∞ –º–æ–∂–µ server.js –¥–∞ –≥–æ –∏–∑–ø–æ–ª–∑–≤–∞
export default router;